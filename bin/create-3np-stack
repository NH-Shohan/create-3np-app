#!/usr/bin/env node
import { execSync } from "child_process";
import fs from "fs";
import path from "path";

const __filename = new URL(import.meta.url).pathname;
const __dirname = path.dirname(__filename);

const colors = {
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  reset: "\x1b[0m",
};

const colorize = (text, color) => `${colors[color]}${text}${colors.reset}`;

const buildProject = (directory, color) => {
  try {
    if (directory.includes("frontend")) {
      console.log(colorize(`Building frontend in ${directory}...`, color));
      execSync("npm run build", { cwd: directory, stdio: "inherit" });
      console.log(colorize("Frontend build completed successfully!", color));
    } else if (directory.includes("backend")) {
      console.log(colorize(`Building backend in ${directory}...`, color));
      execSync("npm run build", { cwd: directory, stdio: "inherit" });
      console.log(colorize("Backend build completed successfully!", color));
    }
  } catch (error) {
    console.error(
      colorize(`Error building project in ${directory}:`, "red"),
      error.message || error
    );
    process.exit(1);
  }
};

const createApp = (appName) => {
  if (!appName) {
    console.log("Please provide an app name: ");
    process.stdin.once("data", (input) => {
      const userInput = input.toString().trim();
      createApp(userInput);
    });
    return;
  }

  const templatesDir = path.join(__dirname, "../templates");

  try {
    fs.mkdirSync(`./${appName}/frontend`, { recursive: true });
    console.log(colorize("Frontend folder created successfully!", "green"));
    fs.mkdirSync(`./${appName}/backend`, { recursive: true });
    console.log(colorize("Backend folder created successfully!", "green"));

    copyTemplates(path.join(templatesDir, "frontend"), `./${appName}/frontend`);
    copyTemplates(path.join(templatesDir, "backend"), `./${appName}/backend`);

    installDependencies(`./${appName}/frontend`);
    installDependencies(`./${appName}/backend`);

    buildProject(`./${appName}/frontend`, "yellow");
    buildProject(`./${appName}/backend`, "yellow");

    console.log(colorize(`\nApp "${appName}" created successfully!`, "green"));
    console.log(
      colorize(
        `\n\nTo start working on your project, navigate to the project directory and open your project in your preferred code editor by running:`,
        "green"
      )
    );
    console.log(colorize(`\n\tcd ${appName}`, "green"));
    console.log(colorize(`\tcode . `, "green"));
    console.log(
      colorize(
        `\n# or replace "code" with the command for your code editor`,
        "green"
      )
    );
  } catch (error) {
    console.error(
      colorize("Error creating app:", "red"),
      error.message || error
    );
    process.exit(1);
  }
};

const copyTemplates = (sourceDir, destinationDir) => {
  const templateFiles = fs.readdirSync(sourceDir);

  for (const file of templateFiles) {
    if (file !== "node_modules") {
      const sourcePath = path.join(sourceDir, file);
      const destinationPath = path.join(destinationDir, file);

      if (fs.statSync(sourcePath).isDirectory()) {
        copyTemplates(sourcePath, destinationPath);
      } else {
        fs.mkdirSync(path.dirname(destinationPath), { recursive: true });
        fs.copyFileSync(sourcePath, destinationPath);
      }
    }
  }
};

const installDependencies = (directory) => {
  try {
    console.log(
      colorize(`Installing dependencies in ${directory}...`, "yellow")
    );
    execSync("npm install", { cwd: directory, stdio: "inherit" });
  } catch (error) {
    console.error(
      colorize(`Error installing dependencies in ${directory}:`, "red"),
      error.message || error
    );
    process.exit(1);
  }
};

const appName = process.argv[2];
createApp(appName);
